openapi: 3.0.2
info:
  title: API сервер для проекта «Шесть городов».
  description: |-
    * Список ресурсов и маршрутов сервера «Шесть городов».
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 2.0.0
tags:
  - name: offers
    description: Действия с объявлениями.
  - name: comments
    description: Действия с комментариями.
  - name: users
    description: Действия с пользователем.

paths:
  /users/register:
    post:
      tags:
        - users
      summary: Создание нового пользователя
      description: Регистрирует нового пользователя.

      requestBody:
        description: Информация для создания нового пользователя.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        required: true

      responses:
        "201":
          description: Пользователь зарегистрирован. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "409":
          description: Пользователь с таким email уже существует.

  /users/login:
    post:
      tags:
        - users
      summary: Авторизация пользователя
      description: Авторизует пользователя на основе логина и пароля

      requestBody:
        description: Информация для авторизации.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginUser'
        required: true

      responses:
        "201":
          description: Пользователь авторизован. Возвращает клиенту токен.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userToken'

        "401":
          description: Пользователь не авторизован.

    get:
      tags:
        - users
      summary: Проверка состояния пользователя
      description: Возвращает информацию по авторизованному пользователю. Проверка состояния клиента производится на основании сессионного токена
      parameters:
        - name: token
          $ref: '#/components/parameters/token'

      responses:
        "200":
          description: Пользователь авторизован. Возвращает информацию о пользователе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "401":
          description: Пользователь не авторизован.

  /users/logout:
    get:
      tags:
        - users
      summary: Завершает пользовательский сеанс
      description: 'Если токен прошёл проверку, сервис завершает пользовательский сеанс (сессию). В противном случае возвращает ошибку и соответствующий код состояния.'
      parameters:
        - name: token
          $ref: '#/components/parameters/token'

      responses:
        "200":
          description: Пользовательский сеанс завершен

        "400":
          description: Произошла ошибка

  /offers:
    get:
      tags:
        - offers
      summary: Запрос объявлений
      description: По умолчанию сервис возвращает не больше 60 предложений по аренде. Клиент может запросить больше предложений, указав нужное количество в параметре запроса. Сервис всегда возвращает отсортированный список предложений по дате публикации (по убыванию)
      parameters:
        - name: count
          description: Количество запрашиваемых объявлений
          in: header
          schema:
            type: integer
            example: 90
          required: false

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offers'

    post:
      tags:
        - offers
      summary:  Создание нового предложения.
      description:  Сервис предоставляет ресурс для создания новых предложений.
      parameters:
        - name: token
          $ref: '#/components/parameters/token'

      requestBody:
        description: Информация для создания нового предложения.
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/offer'

      responses:
        "200":
          description: Объявление создано. Возвращает информацию об объявлении
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/offer'

        "400":
          description: Валидация не пройдена.

  /offers/{id}:
    get:
      tags:
        - offers
      summary: Получение детальной информации по одному предложению.
      description: Сервис предоставляет ресурс для получения детальной информации по одному предложению.
      parameters:
        - name: id
          $ref: '#/components/parameters/id'

      responses:
        "200":
          description: Объявление найдено. Возвращает информацию об объявлении
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'

        "404":
          description: Объявление не найдено.

    delete:
      tags:
        - offers
      summary: Удаление предложения по id.
      description: Сервис предоставляет ресурс для удаления предложений по аренде. Клиент может удалять только свои предложения. При удалении предложения комментарии к предложению удаляются автоматически.
      parameters:
         - name: id
           $ref: '#/components/parameters/id'
         - name: token
           $ref: '#/components/parameters/token'

      responses:
        "200":
          description: Объявление удалено.

        "404":
          description: Объявление не найдено.

        "409":
          $ref: '#/components/responses/conflict'

    patch:
      tags:
        - offers
      summary:  Редактирование предложения.
      description:  Сервис предоставляет ресурс для редактирования предложения.
      parameters:
        - name: id
          $ref: '#/components/parameters/id'
        - name: token
          $ref: '#/components/parameters/token'

      requestBody:
        description: Информация для редактирования предложения.
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/offer'

      responses:
        "200":
          description: Объявление отредактировано. Возвращает информацию об обновленном объявлении
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/offer'

        "404":
          description: Объявление не найдено.

        "409":
          $ref: '#/components/responses/conflict'

  /favorites:
    get:
      tags:
        - users
      summary: Получение предложений, добавленных в избранное
      description: Сервис возвращает все предложения, добавленные в избранное.
      parameters:
        - name: token
          $ref: '#/components/parameters/token'

      responses:
        "200":
          description: Предложения найдены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offers'

        "401":
          description: Пользователь не авторизован.

        "404":
          description: Предложения не найдены

    patch:
      tags:
        - users
      summary: Удаление/Добавление предложения из/в спискок избранных предложений.
      parameters:
         - name: token
           $ref: '#/components/parameters/token'

      requestBody:
          description: id объявления для удаления/добавления предложения из/в спискок избранных предложений.
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  id:
                    type: string
                required:
                  - "id"


      responses:
        "200":
          description: Объявление удалено/добавлено из/в список избранных предложений

        "404":
          description: Объявление не найдено.

        "409":
          $ref: '#/components/responses/conflict'

  /comments/{id}:
    get:
      tags:
        - comments
      summary: Получение списка комментариев для определённого предложения.
      description: Сервис всегда возвращает список из 50 (или меньше) последних комментариев. Комментарии отсортированы по дате публикации (по убыванию). Сначала новые, потом старые.
      parameters:
        - name: id
          $ref: '#/components/parameters/id'

      responses:
        "200":
          description: Комментарии найдены. Возвращает массив с комментариями.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comments'

        "404":
          description: Объявление не найдено.

    post:
      tags:
        - comments
      summary: Добавление комментария к определённому предложению по аренде.
      description: Сервис предоставляет ресурс для добавления комментариев к определённому предложению по аренде. Удаление и редактирование комментариев не предусмотрено.
      parameters:
        - name: id
          $ref: '#/components/parameters/id'
        - name: token
          $ref: '#/components/parameters/token'

      requestBody:
        description: Информация для создания нового комментария.
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/comment'

      responses:
        "200":
          description: Комментарий создаy. Возвращает созданный комментарий.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'

        "404":
          description: Объявление не найдено.

        "409":
          $ref: '#/components/responses/conflict'

  /premium/{cityName}:
    get:
      tags:
        - offers
      summary: Получение списка премиальных предложений для определённого города.
      description: Сервис предоставляет ресурс для получения списка премиальных предложений для определённого города. Премиальное предложение — предложение с флагом «Premium». Сервис возвращает не больше 3 предложений с флагом «Premium». Список возвращаемых предложений отсортирован по дате публикации (по убыванию).
      parameters:
        - name: cityName
          in: path
          schema:
            type: string
            enum:
              - paris
              - cologne
              - brussels
              - amsterdam
              - hamburg
              - dusseldorf
          required: true

      responses:
        "200":
          description: Предложения найдены. Возвращает массив с предложениями.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offers'

        "404":
          description: Предложения не найдены.

components:
  responses:
    conflict:
      description: Объявление не относится к текущему пользователю.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Это не ваше!

  parameters:
    token:
      name: token
      in: header
      required: true
      description: Сессионный токен
      schema:
        type: string
        example: daFDAWFAWfaWfFw232jJJ

    id:
      name: offerId
      in: path
      schema:
        type: string
      required: true

  schemas:
    createUser:
      type: object

      properties:
        mail:
          type: string
          example: keks@htmlacademy.ru

        name:
          type: string
          example: Keks

        avatar:
          type: string
          example: https://via.placeholder.com/20x20

        password:
          type: string
          example: 123456Dw!

        type:
          type: string
          example: pro

    user:
      type: object

      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea

        mail:
          type: string
          example: keks@htmlacademy.ru

        name:
          type: string
          example: Keks

        avatar:
          type: string
          example: https://via.placeholder.com/20x20

        type:
          type: string
          enum:
            - common
            - pro
          example: pro

    loginUser:
      type: object

      properties:
        mail:
          type: string
          example: keks@htmlacademy.ru

        password:
          type: string
          example: 123456

    userToken:
      type: object

      properties:
        token:
          type: string
          example: daFDAWFAWfaWfFw232jJJ

    coords:
      type: object
      example: { latitude: 0.234234, longitude: 31.3243242 }
      properties:
        latitude:
          type: number
          example: 12.23123123123

        longitude:
          type: number
          example: 0.312341241242

    city:
      type:  object
      example: { city: 'Paris', coords: { latitude: 0.234234, longitude: 31.3243242 } }
      properties:
        name:
          type: string
          enum:
            - paris
            - cologne
            - brussels
            - amsterdam
            - hamburg
            - dusseldorf
          example: Paris

        coords:
          type: object
          $ref: '#/components/schemas/coords'

    offer:
      type: object
      properties:
        id:
          type: string

        title:
          type: string
          example: this is title

        description:
          type: string
          example: description is this

        postDate:
          type: string
          description: ISO date string
          example: '2023-05-31T12:25:53.304Z'

        city:
          type: object
          $ref: '#/components/schemas/city'

        preview:
          type: string
          example: https://via.placeholder.com/20x20

        photos:
          type: array
          items:
            type: string
          description: Всегда 6 ссылок на фотографии
          example: [
            https://via.placeholder.com/20x20,
            https://via.placeholder.com/20x20,
            https://via.placeholder.com/20x20,
            https://via.placeholder.com/20x20,
            https://via.placeholder.com/20x20,
            https://via.placeholder.com/20x20,
          ]

        premium:
          type: boolean

        favorite:
          type: boolean

        rating:
          type: number
          example: 2.5

        houseType:
          type: string
          enum:
            - apartment
            - house
            - room
            - hotel
          example: 'room'

        roomNumber:
          type: integer
          example: 3

        guests:
          type: integer
          example: 5

        price:
          type: number
          example: 55555

        features:
          type: array
          items:
            type: string
          enum:
            - Breakfast
            - Air conditioning
            - Laptop friendly workspace
            - Baby seat
            - Washer
            - Towels
            - Fridge
          example: [
            Breakfast,
            Washer,
            Towels,
            Fridge
          ]

        author:
          type: object
          $ref: '#/components/schemas/user'
          example: this is title

        commentCount:
          type: integer
          description: колличество комментариев
          example: 43

        coords:
          type: object
          $ref: '#/components/schemas/coords'

    offers:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/offer'

    comment:
      type: object
      properties:
        text:
          type: string

        postDate:
          type: string

        rating:
          type: number

        user:
          type: string
          description: id юзера

    comments:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/comment'
